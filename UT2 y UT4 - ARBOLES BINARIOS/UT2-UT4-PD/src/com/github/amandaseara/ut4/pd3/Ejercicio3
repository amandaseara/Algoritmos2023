#EJERCICIO 3

ESCENARIO:
    Estos ejercicios tratan del desarrollo de algoritmos en seudocódigo y análisis del tiempo de 
    ejecución correspondiente para el TDA ArbolBinarioBusqueda – TArbolBB- (y el 
    correspondiente TDA NodoArbolBinariobBusqueda – TElementoAB).

Dado un Árbol binario de búsqueda que almacena elementos con claves de tipo entero
desarrolla un algoritmo, que Calcule la Suma de las claves de todos los elementos del árbol.
De acuerdo a los lineamientos para desarrollo de algoritmos en seudocódigo presentados en 
clase, deberás desarrollar:
1. Descripción en lenguaje natural del algoritmo solicitado
2. Identificación de precondiciones y postcondiciones correspondientes
3. Escritura del algoritmo en seudocódigo formal
4. Análisis detallado del orden del tiempo de ejecución del algoritmo

RESPUESTA:

LN: Se verifica si la raiz del arbol apunta a nulo, si es asi, se devuelve el valor 0, si no lo es, se llama a la funcion
sumaClaves de la clase nodo.
Precondiciones: Debe existir el arbol.
Postcondiciones: El arbol no se modifica y se retorna un integer con la suma de los datos en cada nodo. 
funcion entero sumaClaves()
COM                                               _
    SI (raiz == nulo) HACER        ---> O(1)       |
        devolver 0                    ---> O(1)    |  ---> o(2N)
    SINO                                           |
        devolver raiz.sumaClaves() ---> O(2N)     _|
    FINSI   
FIN

LN: Creo un contador y le doy el valor entero de la etiqueta del nodo en el que estoy parada.Veridico si tengo hijoIzq, si lo 
tengo al contador le sumo la llamada recursiva de sumaClaves del hijoIzq. Varifico si tengo hijoDer, si lo tengo, le sumo al
contador la llamada recursiva de sumaClaves del hijoDer. Devuelvo el contador final.
Precondiciones: Debe existir el arbol y no ser vacio.
Postcondiciones: El arbol no se modifica y se devuelve un integer con la suma de todas las claves del arbol.
funcion entero sumaClaves()
COM                                                  _  
    entero suma <- int(etiqueta)       ---> O(1)      |
    SI (hijoIzq <> nulo) HACER         ---> O(1)      |
        suma += hijoIzq.sumaClaves()      ---> O(N)   |
    FINSI                                             |    ---> O(2N)
    SI (hijoDer <> nulo) HACER         ---> O(1)      |
        suma += hijoDer.sumaClaves()      ---> O(N)   |
    FINSI                                             |
    devolver suma                      ---> O(1)     _|
FIN
