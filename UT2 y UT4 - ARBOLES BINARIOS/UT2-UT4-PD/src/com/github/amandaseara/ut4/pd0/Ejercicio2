#EJERCICIO 2

1. Dada una expresión aritmética, representada mediante notación prefija, diseña un 
algoritmo que cree el árbol binario de expresión correspondiente.
2. Considera las posibles situaciones de error
3. Escribe varias expresiones aritméticas (con paréntesis), exprésalas en notación prefija 
y luego ejecuta manualmente el algoritmo diseñado para insertar la expresión en el 
árbol. Por último, para cada árbol generado, ejecuta manualmente el algoritmo 
diseñado en el Ejercicio 1.

RESPUESTA:

Interface Nodo {}                        |                   
                                         |
Clase NumeroNodo implements Nodo         |
COM                                      |
    int numero                           |
    Nodo izquierdo -> nulo               |
    Nodo derecho -> nulo                 |
FIN                                      | ---> Clases de nodos utilizadas en los proximos algoritmos
                                         |
Clase OperacionNodo implements Nodo      |
COM                                      |
    String operacion;                    |
    Nodo expresionIzquierda -> nulo      |
    Nodo expresionDerecha -> nulo        |
FIN                                     _|


Precondiciones: Debe existir el arbol y estar vacio, la operacion pasada por string debe contener parentesis en todas sus operaciones.
Postcondicion: Se modifica el arbol, de manera que su recorrido inOrden ser la operacion aritmetica escrita en el string

funcion insertarOperacion(String operacion)
COM
    integer i -> 0;
    MIENTRAS (i < operacion.length) HACER
        SI operacion[i] <> "(" && operacion[i] <> ")" HACER
            SI primero == nulo HACER
                primero -> nuevo NumeroNodo
                primero.numero = int(operacion[i])
            SINO SI (operacion[i] == "+" || operacion[i] == "-" || operacion[i] == "/" || operacion[i] == "*") HACER
                    Nodo nuevo -> nuevo OperacionNodo
                    nuevo.operacion -> operacion[i]
                    nuevo.izq -> primero
                    primero -> nuevo
                    SI operacion[i+1] == "(" HACER
                        primero.der -> insertarOperacion(operacion.substring(i))
                    FINSI
                 SINO
                      primero.der -> nue NumeroNodo
                      primero.der.numero = int(operacion[i])
                 FINSI
            FINSI
        FINSI
        i++;
    FINMIENTRAS
FIN
