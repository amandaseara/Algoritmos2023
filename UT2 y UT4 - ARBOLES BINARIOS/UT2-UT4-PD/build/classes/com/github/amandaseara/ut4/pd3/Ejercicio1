#EJERCICIO 1

ESCENARIO:
    Estos ejercicios tratan del desarrollo de algoritmos en seudocódigo y análisis del tiempo de 
    ejecución correspondiente para el TDA ArbolBinarioBusqueda – TArbolBB- (y el 
    correspondiente TDA NodoArbolBinariobBusqueda – TElementoAB).

Desarrolla un algoritmo (ambas partes, método de Árbol y método de Nodo), para Insertar un 
nuevo Nodo en el Árbol (este nuevo nodo se ha de brindar como parámetro al método del 
Arbol).
De acuerdo a los lineamientos para desarrollo de algoritmos en seudocódigo presentados en 
clase, deberás desarrollar:
1. Descripción en lenguaje natural del algoritmo solicitado
2. Identificación de precondiciones y postcondiciones correspondientes
3. Escritura del algoritmo en seudocódigo formal
4. Análisis detallado del orden del tiempo de ejecución del algoritmo

RESPUESTA:

LN: Se verifica si el arbol esta vacio, si lo esta se inserta el nodo como raiz, sino se llama a la funcion insertar de nodo
pasandole el mismo nodo que nos pasaron por parametro.
Precondicion: Debe existir el arbol. Debe existir y no ser vacio el nodo enviado por parametro.
Postcondiciones: El arbol se modifica agregando el nodo ordenado.
funcion insertar(Nodo nodo)
COM                                          _
    SI (raiz == nulo) HACER     ---> O(1)     |
        raiz =                     ---> O(1)  |  ---> O(2n)
    SINO                                      |
        raiz.insertar(nodo)        ---> O(2n)_|
    FINSI
FIN

LN: Si la etiqueta del nodo a agregar es menor a la etiqueta del nodo en el que estoy parada, se verifica si el hijoIzq del nodo 
en el que estoy parada es nulo, si lo es se agrega el nodo pasado por parametro como hijoIzq, si no lo es se llama recursivamente
a la funcion pero desde el hijoIzq. Si la etiqueta del nodo a agregar es mayor a la etiqueta del nodo en el que estoy parada se 
verifica si el hijoDer del nodo en el que estoy parada es nulo, si lo es se agraga el nodo pasado por parametro como hijoDer, si
no lo es, se llama recursivamente a la funcion pere desde el hijoDer.
Precondicion: Debe existir el arbol. Debe existir y no ser vacio el nodo enviado por parametro.
Postcondiciones: El arbol se modifica agregando el nodo ordenado.
funcion insertar(Nodo nodo)
COM                                                               _
    SI (nodo.etiqueta < etiqueta) HACER           ---> O(1)        |       
        SI (hijoIzq <> nulo) HACER                   ---> O(1)     |           
            devolver hijoIzq.insertar(nodo)             ---> O(n)  |
        SINO                                                       |
            hijoIzq = nodo                              ---> O(1)  | 
        FINSI                                                      | ---> O(2n)
    FINSI                                                          |
    SI (nodo.etiqueta > etiqueta) HACER          ---> O(1)         |        
        SI (hijoDer <> nulo) HACER                  ---> O(1)      |        
            devolver hijoDer.insertar(nodo)            ---> O(n)   | 
        SINO                                                       |
            hijoDer = nodo                             ---> O(1)  _|    
        FINSI
    FINSI                          
FIN
